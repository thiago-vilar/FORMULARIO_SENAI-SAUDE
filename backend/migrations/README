# üìö Documenta√ß√£o T√©cnica ‚Äî Backend (SENAI‚ÄëSa√∫de)

> **Stack**: FastAPI ¬∑ SQLAlchemy ¬∑ PostgreSQL 16 ¬∑ Pydantic ¬∑ Alembic ¬∑ Pytest ¬∑ Docker Compose\
> **Arquitetura**: MVC + Factory ¬∑ Singleton ¬∑ Observer

---

## 1) Vis√£o Geral

Backend com API REST para gerenciar **Formul√°rios**, **Campos** (incluindo calculados) e **Respostas**, com versionamento. Campos calculados usam **engine reativa** (Observer).

**Principais pontos:**

- FastAPI para endpoints e documenta√ß√£o autom√°tica
- SQLAlchemy + Alembic para ORM e migra√ß√µes
- Pydantic para valida√ß√µes robustas
- Padr√µes: Singleton, Factory, Observer
- Testes: Pytest
- Infra: Docker Compose (API + PostgreSQL [+ Frontend])

---

## 2) Endpoints Principais

**Formul√°rios**

- `POST /formularios`
- `GET /formularios`
- `GET /formularios/{id}`
- `PUT /formularios/{id}`
- `DELETE /formularios/{id}`

**Campos**

- `POST /campos`
- `PUT /campos/{id}`
- `DELETE /campos/{id}`

**Respostas**

- `POST /respostas`
- `GET /respostas?formulario_id={id}`
- `GET /respostas/{id}`

---

## 3) Setup R√°pido (Docker)

```bash
docker compose up --build
```

Acesse: `http://localhost:8000`\
Swagger: `/docs`\
OpenAPI JSON: `/openapi.json`

---

## 4) Setup Local (sem Docker)

```bash
python -m venv .env && source .env/bin/activate
pip install -r requirements.txt
alembic upgrade head
uvicorn backend.app.main:app --reload --host 0.0.0.0 --port 8000
```

**Vari√°veis:**

- `DATABASE_URL=postgresql+psycopg2://user:pass@localhost:5432/senai_saude`
- `ENV=dev|prod`

---

## 5) Testes

```bash
pytest -q --disable-warnings --maxfail=1
```

---

## 6) Observabilidade e Auditoria

- **Logs estruturados** com request\_id
- **Auditoria**: user\_id, a√ß√£o, recurso, timestamp
- Futuro: Prometheus + Grafana

---

## 7) Pr√≥ximos Passos

- Integrar logs e auditoria
- Implementar m√©tricas e monitoramento

